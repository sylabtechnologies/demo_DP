// https://leetcode.com/problems/minimize-malware-spread/
// https://www.programcreek.com/2014/05/leetcode-number-of-connected-components-in-an-undirected-graph-java/

package minmalware;
import java.util.*;

class Solution
{
    int[][] myGraph;
    int colors[];
    int colorsSize;
    int colorsSizes[];
    
    public int minMalwareSpread(int[][] g, int[] initial)
    {
        myGraph = g;
        int gLen = myGraph.length;
        colors = new int[gLen];
        colorsSizes = new int[gLen];

        Arrays.fill(colors, -1);
        
        //
        colorsSize = 0;
        for (int node = 0; node < colors.length; node++)
        {
            if (colors[node] < 0) dfs(node, colorsSize);
            colorsSize++;
        }
        
        //
        int colorCount[] = new int[colorsSize];
        for (int node : initial)
            colorCount[colors[node]]++;

        int ans = Integer.MAX_VALUE;
        for (int node : initial)
        {
            int c = colors[node];
            if (colorCount[c] == 1)
            {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (colorsSizes[c] > colorsSizes[colors[ans]])
                    ans = node;
                else if (colorsSizes[c] == colorsSizes[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE)
        {
            ans = Integer.MAX_VALUE;
            for (int node: initial)
                ans = Math.min(ans, node);
        }


        return ans;
    }

    private void dfs(int node, int color)
    {
        colors[node] = color;
        colorsSizes[color]++;
        
        for (int nei = 0; nei < myGraph.length; ++nei)
            if (myGraph[node][nei] == 1 && colors[nei] == -1)
                dfs(nei, color);
    }
}

public class MinMalware
{
    public static void main(String[] args)
    {
        int graph[][] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        int init[] = {0, 1};
        System.out.println(new Solution().minMalwareSpread(graph, init));  
    }
}

